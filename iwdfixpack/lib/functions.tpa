// deleted effects which are now in WeiDU itself

/////                                                  \\\\\
///// item/spell functions                             \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION ALTER_AREA_AMBIENT
  INT_VAR coord_x = "-10" 
          coord_y = "-10"
          radius = "-10"
          height = "-10"
          pitch = "-10"
          volume_variation = "-10"
          volume = "-10"
          sounds = "-10"
          base_interval = "-10"
          interval_variation = "-10"
          flag_time_0 = "-10"
          flag_time_1 = "-10"
          flag_time_2 = "-10"
          flag_time_3 = "-10"
          flag_time_4 = "-10"
          flag_time_5 = "-10"
          flag_time_6 = "-10"
          flag_time_7 = "-10"
          flag_time_8 = "-10"
          flag_time_9 = "-10"
          flag_time_10 = "-10"
          flag_time_11 = "-10"
          flag_time_12 = "-10"
          flag_time_13 = "-10"
          flag_time_14 = "-10"
          flag_time_15 = "-10"
          flag_time_16 = "-10"
          flag_time_17 = "-10"
          flag_time_18 = "-10"
          flag_time_19 = "-10"
          flag_time_20 = "-10"
          flag_time_21 = "-10"
          flag_time_22 = "-10"
          flag_time_23 = "-10"
          flag_enabled = "-10"
          flag_looping = "-10"
          flag_ignore_radius = "-10"
          flag_random_order = "-10"
          flag_high_mem = "-10"
  STR_VAR ambient_name = ~~
          sound0 = null
          sound1 = null
          sound2 = null
          sound3 = null
          sound4 = null
          sound5 = null
          sound6 = null
          sound7 = null
          sound8 = null
          sound9 = null
BEGIN

  READ_SHORT 0x82 amb_num
  READ_LONG  0x84 amb_off
  FOR (index = 0 ; index < amb_num ; ++index) BEGIN
    READ_ASCII (amb_off + 0x00 + (index * 0xd4)) ambient_name_check (32) NULL
    PATCH_IF ("%ambient_name%" STRING_COMPARE_CASE "%ambient_name_check%" = 0) BEGIN
      PATCH_IF coord_x != "-10"            BEGIN WRITE_SHORT (amb_off + 0x20 + (index * 0xd4)) coord_x END
      PATCH_IF coord_y != "-10"            BEGIN WRITE_SHORT (amb_off + 0x22 + (index * 0xd4)) coord_y END
      PATCH_IF radius != "-10"             BEGIN WRITE_SHORT (amb_off + 0x24 + (index * 0xd4)) radius END
      PATCH_IF height != "-10"             BEGIN WRITE_SHORT (amb_off + 0x26 + (index * 0xd4)) height END
      PATCH_IF pitch != "-10"              BEGIN WRITE_LONG  (amb_off + 0x28 + (index * 0xd4)) pitch END
      PATCH_IF volume_variation != "-10"   BEGIN WRITE_SHORT (amb_off + 0x2c + (index * 0xd4)) volume_variation END
      PATCH_IF volume != "-10"             BEGIN WRITE_SHORT (amb_off + 0x2e + (index * 0xd4)) volume END
      PATCH_IF sounds != "-10"             BEGIN WRITE_SHORT (amb_off + 0x80 + (index * 0xd4)) sounds END
      PATCH_IF base_interval != "-10"      BEGIN WRITE_LONG  (amb_off + 0x84 + (index * 0xd4)) base_interval END
      PATCH_IF interval_variation != "-10" BEGIN WRITE_LONG  (amb_off + 0x88 + (index * 0xd4)) interval_variation END
      READ_LONG (amb_off + 0x8c + (index * 0xd4)) time
        PATCH_IF flag_time_0  = 0 BEGIN SET time = (time BAND `BIT0) END
        PATCH_IF flag_time_1  = 0 BEGIN SET time = (time BAND `BIT1) END
        PATCH_IF flag_time_2  = 0 BEGIN SET time = (time BAND `BIT2) END
        PATCH_IF flag_time_3  = 0 BEGIN SET time = (time BAND `BIT3) END
        PATCH_IF flag_time_4  = 0 BEGIN SET time = (time BAND `BIT4) END
        PATCH_IF flag_time_5  = 0 BEGIN SET time = (time BAND `BIT5) END
        PATCH_IF flag_time_6  = 0 BEGIN SET time = (time BAND `BIT6) END
        PATCH_IF flag_time_7  = 0 BEGIN SET time = (time BAND `BIT7) END
        PATCH_IF flag_time_8  = 0 BEGIN SET time = (time BAND `BIT8) END
        PATCH_IF flag_time_9  = 0 BEGIN SET time = (time BAND `BIT9) END
        PATCH_IF flag_time_10 = 0 BEGIN SET time = (time BAND `BIT10) END
        PATCH_IF flag_time_11 = 0 BEGIN SET time = (time BAND `BIT11) END
        PATCH_IF flag_time_12 = 0 BEGIN SET time = (time BAND `BIT12) END
        PATCH_IF flag_time_13 = 0 BEGIN SET time = (time BAND `BIT13) END
        PATCH_IF flag_time_14 = 0 BEGIN SET time = (time BAND `BIT14) END
        PATCH_IF flag_time_15 = 0 BEGIN SET time = (time BAND `BIT15) END
        PATCH_IF flag_time_16 = 0 BEGIN SET time = (time BAND `BIT16) END
        PATCH_IF flag_time_17 = 0 BEGIN SET time = (time BAND `BIT17) END
        PATCH_IF flag_time_18 = 0 BEGIN SET time = (time BAND `BIT18) END
        PATCH_IF flag_time_19 = 0 BEGIN SET time = (time BAND `BIT19) END
        PATCH_IF flag_time_20 = 0 BEGIN SET time = (time BAND `BIT20) END
        PATCH_IF flag_time_21 = 0 BEGIN SET time = (time BAND `BIT21) END
        PATCH_IF flag_time_22 = 0 BEGIN SET time = (time BAND `BIT22) END
        PATCH_IF flag_time_23 = 0 BEGIN SET time = (time BAND `BIT23) END
        PATCH_IF flag_time_0  = 1 BEGIN SET time = (time BOR BIT0) END
        PATCH_IF flag_time_1  = 1 BEGIN SET time = (time BOR BIT1) END
        PATCH_IF flag_time_2  = 1 BEGIN SET time = (time BOR BIT2) END
        PATCH_IF flag_time_3  = 1 BEGIN SET time = (time BOR BIT3) END
        PATCH_IF flag_time_4  = 1 BEGIN SET time = (time BOR BIT4) END
        PATCH_IF flag_time_5  = 1 BEGIN SET time = (time BOR BIT5) END
        PATCH_IF flag_time_6  = 1 BEGIN SET time = (time BOR BIT6) END
        PATCH_IF flag_time_7  = 1 BEGIN SET time = (time BOR BIT7) END
        PATCH_IF flag_time_8  = 1 BEGIN SET time = (time BOR BIT8) END
        PATCH_IF flag_time_9  = 1 BEGIN SET time = (time BOR BIT9) END
        PATCH_IF flag_time_10 = 1 BEGIN SET time = (time BOR BIT10) END
        PATCH_IF flag_time_11 = 1 BEGIN SET time = (time BOR BIT11) END
        PATCH_IF flag_time_12 = 1 BEGIN SET time = (time BOR BIT12) END
        PATCH_IF flag_time_13 = 1 BEGIN SET time = (time BOR BIT13) END
        PATCH_IF flag_time_14 = 1 BEGIN SET time = (time BOR BIT14) END
        PATCH_IF flag_time_15 = 1 BEGIN SET time = (time BOR BIT15) END
        PATCH_IF flag_time_16 = 1 BEGIN SET time = (time BOR BIT16) END
        PATCH_IF flag_time_17 = 1 BEGIN SET time = (time BOR BIT17) END
        PATCH_IF flag_time_18 = 1 BEGIN SET time = (time BOR BIT18) END
        PATCH_IF flag_time_19 = 1 BEGIN SET time = (time BOR BIT19) END
        PATCH_IF flag_time_20 = 1 BEGIN SET time = (time BOR BIT20) END
        PATCH_IF flag_time_21 = 1 BEGIN SET time = (time BOR BIT21) END
        PATCH_IF flag_time_22 = 1 BEGIN SET time = (time BOR BIT22) END
        PATCH_IF flag_time_23 = 1 BEGIN SET time = (time BOR BIT23) END
      WRITE_LONG (amb_off + 0x8c + (index * 0xd4)) time
      READ_LONG  (amb_off + 0x90 + (index * 0xd4)) flags
        PATCH_IF flag_enabled       = 0 BEGIN SET flags = (flags BAND `BIT0) END
        PATCH_IF flag_looping       = 0 BEGIN SET flags = (flags BAND `BIT1) END
        PATCH_IF flag_ignore_radius = 0 BEGIN SET flags = (flags BAND `BIT2) END
        PATCH_IF flag_random_order  = 0 BEGIN SET flags = (flags BAND `BIT3) END
        PATCH_IF flag_high_mem      = 0 BEGIN SET flags = (flags BAND `BIT4) END
        PATCH_IF flag_enabled       = 1 BEGIN SET flags = (flags BOR BIT0) END
        PATCH_IF flag_looping       = 1 BEGIN SET flags = (flags BOR BIT1) END
        PATCH_IF flag_ignore_radius = 1 BEGIN SET flags = (flags BOR BIT2) END
        PATCH_IF flag_random_order  = 1 BEGIN SET flags = (flags BOR BIT3) END
        PATCH_IF flag_high_mem      = 1 BEGIN SET flags = (flags BOR BIT4) END
      WRITE_LONG (amb_off + 0x90 + (index * 0xd4)) flags
      PATCH_IF ("%sound0%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x30 + (index * 0xd4)) "%sound0%" #8 END
      PATCH_IF ("%sound1%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x38 + (index * 0xd4)) "%sound1%" #8 END
      PATCH_IF ("%sound2%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x40 + (index * 0xd4)) "%sound2%" #8 END
      PATCH_IF ("%sound3%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x48 + (index * 0xd4)) "%sound3%" #8 END
      PATCH_IF ("%sound4%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x50 + (index * 0xd4)) "%sound4%" #8 END
      PATCH_IF ("%sound5%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x58 + (index * 0xd4)) "%sound5%" #8 END
      PATCH_IF ("%sound6%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x60 + (index * 0xd4)) "%sound6%" #8 END
      PATCH_IF ("%sound7%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x68 + (index * 0xd4)) "%sound7%" #8 END
      PATCH_IF ("%sound8%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x70 + (index * 0xd4)) "%sound8%" #8 END
      PATCH_IF ("%sound9%" STRING_COMPARE_CASE "null") BEGIN WRITE_ASCIIE (amb_off + 0x78 + (index * 0xd4)) "%sound9%" #8 END
    END // end ambient name check
  END // end for loop

END // end function
  
/////                                                  \\\\\
///// item/spell functions                             \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION CONVERT_BG_IWD_DURATION
  STR_VAR changeto = "iwd" // iwd changes effects to use round = 7; otherwise use round = 6
  BEGIN

  READ_LONG  0x6a fx_off
  READ_LONG  0x64 abil_off
  READ_SHORT 0x68 abil_num
  PATCH_IF ("%SOURCE_FILE%" STRING_COMPARE_REGEXP "^.+\.itm" = 0) BEGIN SET abil_length = 0x38 END ELSE BEGIN SET abil_length = 0x28 END
  PATCH_IF (abil_num > 0) BEGIN // if there are headers, figure out the final effect
    READ_SHORT (abil_off + 0x1e + ((abil_num - 1) * abil_length)) abil_fx_num
    READ_SHORT (abil_off + 0x20 + ((abil_num - 1) * abil_length)) abil_fx_idx
    SET fx_num = abil_fx_num + abil_fx_idx
  END ELSE BEGIN // else read the last global
    READ_SHORT 0x70 fx_num
  END
  FOR (index = 0 ; index < fx_num ; ++index) BEGIN
    READ_LONG (fx_off + 0x0e + (index * 0x30)) duration
    PATCH_IF (duration > 5) BEGIN // skip 0 duration or short lived cosmetic/auditory
      PATCH_IF ("iwd" STRING_COMPARE_CASE "%changeto%" = 0) BEGIN
        WRITE_LONG (fx_off + 0x0e + (index * 0x30)) ((duration * 7) / 6)
      END ELSE BEGIN
        WRITE_LONG (fx_off + 0x0e + (index * 0x30)) ((duration * 6) / 7)
      END
    END
  END

END
  
/////                                                  \\\\\
///// weapon speed fixes                               \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION cd_weapon_speed // updates weapon speed and item description
  INT_VAR speed = "-1"
  BEGIN
  
  PATCH_IF speed >= 0 BEGIN // must have speed set in function
    READ_LONG  0x64 abil_off
    READ_SHORT 0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      READ_BYTE (abil_off + 0x00 + (index * 0x38)) abil_type
      PATCH_IF ((abil_type = 1) OR (abil_type = 2) OR (abil_type = 4)) BEGIN // melee, ranged, launcher
        WRITE_SHORT (abil_off + 0x12 + (index * 0x38)) speed // set new speed in-game
      END
    END
    FOR (index = 0x54 ; index > 0x4f ; index -= 0x04) BEGIN // only if no identified descript to match and update, go after normal descript (blun04)
      READ_LONG index desc_strref
      PATCH_IF ((desc_strref >= 0) AND (desc_strref < 999999)) BEGIN
        READ_STRREF index desc
        INNER_PATCH_SAVE desc ~%desc%~ BEGIN
          REPLACE_TEXTUALLY ~%text_match_speed%~ ~\1%speed%~
        END
        INNER_ACTION BEGIN
          STRING_SET_EVALUATE desc_strref ~%desc%~
        END
        SET index = 0 // kill loop (if identified updated, don't mess with unidentified)
      END
    END
  END  

END
  
/////                                                  \\\\\
///// items casting spells                             \\\\\
/////                                                  \\\\\

DEFINE_ACTION_FUNCTION cd_items_casting_spells
  INT_VAR cast_at_level = 1
          duration      = "-1"
          item_header   = "-1"
          probability   = 0 
          set_icon      = 0
  STR_VAR item  = null
          spell = null
  BEGIN
  
  ACTION_IF FILE_EXISTS_IN_GAME ~%spell%.spl~ AND
            FILE_EXISTS_IN_GAME ~%item%.itm~ AND
            item_header >= 0 BEGIN
            
    COPY_EXISTING ~%spell%.spl~ ~override~
      READ_SHORT 0x68 abil_num
      READ_LONG  0x64 abil_off
      READ_LONG  0x6a fx_off
      PATCH_IF ((abil_num = 1) OR (cast_at_level = 1)) BEGIN
        SET base_off = abil_off
      END ELSE BEGIN  
        FOR (index = 1 ; index < abil_num ; ++index) BEGIN // skip first ability
          READ_SHORT (abil_off + 0x10 + (index * 0x28)) min_lev
          PATCH_IF min_lev = cast_at_level BEGIN
            SET base_off = (abil_off + 0x00 + (index * 0x28))
            SET index = abil_num // kill loop
          END  
          PATCH_IF min_lev < cast_at_level BEGIN
            SET base_off = (abil_off + 0x00 + ((index - 1) * 0x28))
            SET index = abil_num // kill loop
          END  
        END
      END
      READ_ASCII (base_off + 0x04) icon
      READ_SHORT (base_off + 0x1e) transfer_fx_num
      READ_SHORT (base_off + 0x20) abil_fx_idx 
      READ_ASCII (fx_off + (abil_fx_idx * 0x30)) transfer_effects (0x30 * transfer_fx_num) // read all effects in a massive block
      BUT_ONLY
    
    COPY_EXISTING ~%item%.itm~ ~override~    
      READ_SHORT 0x68 abil_num
      READ_LONG  0x64 abil_off
      READ_LONG  0x6a fx_off
      SET fx_delta = 0
      FOR (index = 0 ; index < abil_num + 1 ; ++index) BEGIN
        PATCH_IF index = 0 BEGIN // global effect loop
          SET abil_fx_idx_off = 0x6e
          SET abil_fx_num_off = 0x70
        END ELSE BEGIN           // ability loops
          SET abil_fx_idx_off = (abil_off + 0x20 + ((index - 1) * 0x38))
          SET abil_fx_num_off = (abil_off + 0x1e + ((index - 1) * 0x38))
        END 
        WRITE_SHORT  abil_fx_idx_off (THIS + fx_delta)         // update with previously inserted effects
        PATCH_IF index = item_header BEGIN                     // if we're in the correct header
          PATCH_IF set_icon AND item_header BEGIN
            WRITE_ASCIIE (abil_fx_idx_off - 0x1c) ~%icon%~ #8  // update icon, if indicated
          END  
          SET fx_delta += transfer_fx_num                      // update delta
          READ_SHORT abil_fx_idx_off abil_fx_idx               // read updated index
          WRITE_SHORT abil_fx_num_off (THIS + transfer_fx_num) // update number of effects
          SET base_fx_add = (fx_off + 0x00 + (abil_fx_idx * 0x30))
          INSERT_BYTES base_fx_add (0x30 * transfer_fx_num)            // make space for...
          WRITE_ASCIIE base_fx_add ~%transfer_effects%~                // transferred effects
          FOR (index2 = 0 ; index2 < transfer_fx_num ; ++index2) BEGIN // loop through newly-inserted effects
            READ_ASCII (base_fx_add + 0x14 + (0x30 * index2)) resref
            PATCH_IF ("%resref%" STRING_COMPARE_CASE "%spell%" = 0) BEGIN 
              WRITE_ASCIIE (base_fx_add + 0x14 + (0x30 * index2)) "%item%" #8 // if self-reference, update
            END // end self-reference check
            PATCH_IF duration >= 0 BEGIN                                  // if custom duration set, update duration
              READ_LONG (base_fx_add + 0x0e + (0x30 * index2)) fx_dur
              PATCH_IF fx_dur > 6 BEGIN                                   // skip instant effects
                WRITE_LONG (base_fx_add + 0x0e + (0x30 * index2)) duration
              END // duration length check
            END // custom duration check
            PATCH_IF probability BEGIN                                    // if custom probability set, scale probabilities
              WRITE_BYTE (base_fx_add + 0x12 + (0x30 * index2)) ((THIS * probability) / 100) 
              WRITE_BYTE (base_fx_add + 0x13 + (0x30 * index2)) ((THIS * probability) / 100) 
            END // custom probability check
          END // end new fx loop
        END // end header match check
      END // end main for loop 
      BUT_ONLY      
            
  END ELSE BEGIN
  
    WARN ~cd_items_casting_spells: file(s) not found or invalid input~
    
  END

END  
  
/////                                                  \\\\\
///// phasing conversion                               \\\\\
/////                                                  \\\\\

DEFINE_PATCH_MACRO cd_convert_phasing BEGIN 
    
  READ_SHORT 0x68 abil_num
  READ_LONG  0x64 abil_off
  READ_LONG  0x6a fx_off
  SET fx_delta = 0
  FOR (index = 0 ; index < abil_num + 1 ; ++index) BEGIN
    WRITE_SHORT (abil_off + 0x20 + (index * 0x38)) (THIS + fx_delta)         // update with previously inserted effects
    READ_SHORT  (abil_off + 0x20 + (index * 0x38)) abil_fx_idx               // read updated index
    READ_SHORT  (abil_off + 0x1e + (index * 0x38)) abil_fx_num               // update number of effects
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_SHORT (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) opcode
      PATCH_IF opcode = 78 BEGIN
        READ_LONG (fx_off + 0x04 + ((abil_fx_idx + index2) * 0x30)) param1
        READ_LONG (fx_off + 0x08 + ((abil_fx_idx + index2) * 0x30)) param2
        READ_LONG (fx_off + 0x0e + ((abil_fx_idx + index2) * 0x30)) duration
        PATCH_IF param2 = 2 BEGIN // param1 damage per second 
          WRITE_SHORT (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30))         12 // op: damage
          WRITE_SHORT (fx_off + 0x08 + ((abil_fx_idx + index2) * 0x30))          0 // normal
          WRITE_SHORT (fx_off + 0x0a + ((abil_fx_idx + index2) * 0x30))         64 // magic
          WRITE_BYTE  (fx_off + 0x0c + ((abil_fx_idx + index2) * 0x30))          1 // timing: permanent
          WRITE_LONG  (fx_off + 0x0e + ((abil_fx_idx + index2) * 0x30))          0 // duration
          WRITE_LONG  (fx_off + 0x1c + ((abil_fx_idx + index2) * 0x30))          0 // num dice
          WRITE_LONG  (fx_off + 0x20 + ((abil_fx_idx + index2) * 0x30))          0 // dice size
          READ_ASCII  (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) clone (48) // clone it for subsequent
          FOR (index3 = 1 ; index3 < duration; ++index3) BEGIN
            SET fx_delta    += 1
            SET index2      += 1
            SET abil_fx_num += 1
            INSERT_BYTES (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30))      0x30 // insert bytes for new effect
            WRITE_ASCIIE (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) ~%clone%~ // clone in original magic damage effect
            WRITE_BYTE   (fx_off + 0x0c + ((abil_fx_idx + index2) * 0x30))         4 // timing: delay/permanent
            WRITE_LONG   (fx_off + 0x0e + ((abil_fx_idx + index2) * 0x30))    index3 // duration
          END
        END    
        PATCH_IF param2 = 3 BEGIN // 1 damage per param1 seconds 
          WRITE_SHORT (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30))         12 // op: damage
          WRITE_SHORT (fx_off + 0x04 + ((abil_fx_idx + index2) * 0x30))          1 // 1 damage
          WRITE_SHORT (fx_off + 0x08 + ((abil_fx_idx + index2) * 0x30))          0 // normal
          WRITE_SHORT (fx_off + 0x0a + ((abil_fx_idx + index2) * 0x30))         64 // magic
          WRITE_BYTE  (fx_off + 0x0c + ((abil_fx_idx + index2) * 0x30))          1 // timing: permanent
          WRITE_LONG  (fx_off + 0x0e + ((abil_fx_idx + index2) * 0x30))          0 // duration
          READ_ASCII  (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) clone (48) // clone it for subsequent
          FOR (index3 = param1 ; index3 < duration; index3 = (index3 + param1)) BEGIN
            SET fx_delta    += 1
            SET index2      += 1
            SET abil_fx_num += 1
            INSERT_BYTES (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30))      0x30 // insert bytes for new effect
            WRITE_ASCIIE (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) ~%clone%~ // clone in original magic damage effect
            WRITE_BYTE   (fx_off + 0x0c + ((abil_fx_idx + index2) * 0x30))         4 // timing: delay/permanent
            WRITE_LONG   (fx_off + 0x0e + ((abil_fx_idx + index2) * 0x30))    index3 // duration
          END
        END
      END // op = 78 check  
    END // fx loop in current ability  
    WRITE_SHORT  (abil_off + 0x1e + (index * 0x38)) abil_fx_num               // update number of effects 
  END // end ability loop  
  
END

// do spell stacking via function; basically we want to insert the 254 *after* any of IWD's 206/290 protections, e.g.
// you don't want the dispel running ahead of an evasion check or, say, an undead immunity

DEFINE_PATCH_FUNCTION cd_spell_stacking
  INT_VAR cloneop = "-1"
  BEGIN
  
  PATCH_IF ("%SOURCE_FILE%" STRING_COMPARE_REGEXP "^.+\.itm" = 0) BEGIN SET abil_length = 0x38 END ELSE BEGIN SET abil_length = 0x28 END
  READ_SHORT 0x68 abil_num
  READ_LONG  0x64 abil_off
  READ_LONG  0x6a fx_off
  SET delta = 0 
  FOR (index = 0 ; index < abil_num; ++index) BEGIN
    READ_SHORT  (abil_off + 0x1e + (index * abil_length)) abil_fx_num
    WRITE_SHORT (abil_off + 0x20 + (index * abil_length)) (THIS + delta)
    READ_SHORT  (abil_off + 0x20 + (index * abil_length)) abil_fx_idx
    SET insert_point_check = 0
    SET inserted = 0
    SET insert_point = (fx_off + 0x00 + (abil_fx_idx * 0x30)) 
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_SHORT (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) op
      READ_ASCII (fx_off + 0x14 + ((abil_fx_idx + index2) * 0x30)) resref
      PATCH_IF (((op = 206) OR (op = 290)) AND ("%SOURCE_RES%" STRING_COMPARE_CASE "%resref%" = 0) AND (!insert_point_check)) BEGIN // blocking effects via 206 or 290
        SET insert_point = (fx_off + 0x00 + ((abil_fx_idx + index2 + 1) * 0x30)) 
      END ELSE BEGIN
        SET insert_point_check = 1
      END     
      PATCH_IF (((op = 206) OR (op = 290)) AND ("%SOURCE_RES%" STRING_COMPARE_CASE "%resref%" = 0) AND (insert_point_check)) BEGIN // blocking effects via 206 or 290
        READ_LONG (fx_off + 0x08 + ((abil_fx_idx + index2) * 0x30)) param2
        PATCH_IF !param2 BEGIN
          DELETE_BYTES (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) 0x30 // delete effect    
          SET abil_fx_num -= 1   
          SET delta -= 1
          SET index2 -= 1
        END
      END        
      PATCH_IF ((op = cloneop) AND (!inserted)) BEGIN // if op to clone
        SET inserted = 1
        READ_ASCII (fx_off + 0x00 + ((abil_fx_idx + index2) * 0x30)) clone (0x30)
        INSERT_BYTES insert_point 0x30
        WRITE_ASCIIE insert_point ~%clone%~ #48
        WRITE_SHORT  (insert_point + 0x00) 254 // opcode: dispel specific spell   
        WRITE_LONG   (insert_point + 0x04)   0 // blank parameter1   
        WRITE_LONG   (insert_point + 0x08)   0 // dispel all effects      
        WRITE_BYTE   (insert_point + 0x0c)   1 // timing: instant/perm
        WRITE_LONG   (insert_point + 0x0e)   0 // duration     
        WRITE_ASCIIE (insert_point + 0x14) ~%SOURCE_RES%~ #8 // self-ref   
        WRITE_LONG   (insert_point + 0x1c)   0 // dice num     
        WRITE_LONG   (insert_point + 0x20)   0 // dice size     
        SET abil_fx_num += 1   
        SET delta += 1
        SET index2 += 1
      END  
    END
    WRITE_SHORT  (abil_off + 0x1e + (index * abil_length)) abil_fx_num // update 
  END

END  

/////                                                  \\\\\
///// miscellaneous creature inventory macros          \\\\\
/////                                                  \\\\\

// this function takes an item listed in a creture file and moves it to an open slot
// it'll try the appropriate slot first and then move to inventory
// same as functions from bg2 fixpack, except reading different offsets for slot_off, item_off, and item_num
DEFINE_PATCH_FUNCTION cd_equip_item

  // defines what we're going to check
  INT_VAR move = 0
          gpuse = 0
  STR_VAR item = "same"
          slot = "helmet"

BEGIN

  SET fruitbats = "-1"
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "helmet" = 0) BEGIN
    SET start = 0
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "armor" = 0) BEGIN
    SET start = 1
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "shield" = 0) BEGIN
    SET start = 2
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "gloves" = 0) BEGIN
    SET start = 3
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "rings" = 0) BEGIN
    SET start = 4
    SET fruitbats = 5
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "amulet" = 0) BEGIN
    SET start = 6
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "jewelry" = 0) BEGIN
    SET start = 4
    SET fruitbats = 6
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "belt" = 0) BEGIN
    SET start = 7
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "boots" = 0) BEGIN
    SET start = 8
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "weapon" = 0) BEGIN
    SET start = 9
    SET fruitbats = 12
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "quiver" = 0) BEGIN
    SET start = 13
    SET fruitbats = 15
  END ELSE
  PATCH_IF ("%slot%" STRING_COMPARE_CASE "quickslot" = 0) BEGIN
    SET start = 18
    SET fruitbats = 20
  END ELSE BEGIN // inventory
    PATCH_IF gpuse = 0 BEGIN // creatures with gpuse scripts will try to use items in the first inventory slots
      SET start = 21
    END ELSE BEGIN
      SET start = 23
    END
    SET fruitbats = 0
  END
  PATCH_IF fruitbats < 0 BEGIN SET fruitbats = start END

  READ_LONG 0x320 slot_off ELSE 0
  READ_LONG 0x324 itm_off  ELSE 0
  READ_LONG 0x328 itm_num  ELSE 0
  FOR (index = 0 ; index < itm_num ; ++index) BEGIN
    READ_ASCII (itm_off + (0x14 * index)) test_item
    PATCH_IF ("%item%" STRING_COMPARE_CASE "%test_item%" = 0) BEGIN
      SET proceed = 1
      FOR (index2 = 0 ; index2 < 36 ; ++index2) BEGIN // first make a loop to make sure it's not assigned somwhere already
        READ_SHORT (slot_off + (index2 * 0x02)) ref
        PATCH_IF ref = index BEGIN
          PATCH_IF move = 1 BEGIN
            WRITE_SHORT (slot_off + (index2 * 0x02)) 0xffff
          END ELSE BEGIN
            SET proceed = 0
          END
        END
      END
      PATCH_IF proceed BEGIN
        FOR (index2 = start ; index2 < 36 ; ++index2) BEGIN // first make a loop to make sure it's not assigned somwhere already
          READ_SHORT (slot_off + (index2 * 0x02)) ref
          PATCH_IF (ref = 0xffff) BEGIN // if null reference in targeted slot
            WRITE_SHORT (slot_off + (index2 * 0x02)) index // adds reference to item
            SET index2 = 36 // kills loop
          END
          PATCH_IF (index2 = fruitbats) BEGIN // if end of possible equipment slots, skip ahead to inventory
            PATCH_IF gpuse = 0 BEGIN // creatures with gpuse scripts will try to use items in the first inventory slots
              SET index2 = 20 // otherwise go to inventory slots
            END ELSE BEGIN
              SET index2 = 22 // otherwise go to inventory slots
            END
          END
        END
      END
    END
  END

END

// run this on creatures with invalid selected weapons; it'll check the weapon slots and update the equipped weapon as needed
DEFINE_PATCH_FUNCTION cd_equip_weapon BEGIN

  READ_LONG 0x320 slot_off ELSE 0
  READ_LONG 0x328 itm_num  ELSE 0
  WRITE_SHORT (slot_off + 0x4c) 0xffff // null equipped weapon - either patch below will enter a valid value, or no valid value exists
  FOR (index = 0 ; index < 4 ; ++index) BEGIN // search through weapon slots
    READ_SHORT (slot_off + 0x12 + (index * 0x02)) ref
    PATCH_IF ((ref != 0xffff) AND (ref < itm_num)) BEGIN // if valid reference in weapon slots
//    PATCH_IF (ref != 0xffff) BEGIN // if valid reference in weapon slots
      WRITE_SHORT (slot_off + 0x4c) index // equipped weapon
      SET "index" = 4 // kills loop and prevents next patch_if
    END
  END

END

// run this on creatures with invalid selected weapons; it'll check the weapon slots and update the equipped weapon as needed
DEFINE_PATCH_FUNCTION cd_equip_weapon_specific

  // defines what we're going to check
  STR_VAR item = ""

BEGIN


  READ_LONG 0x320 slot_off ELSE 0
  READ_LONG 0x324 itm_off  ELSE 0
  FOR (index = 0; index < 4; ++index) BEGIN // cycles through weapon slots
    READ_SHORT (slot_off + 0x12 + (index * 0x02)) slot_num
    PATCH_IF (slot_num < 37) BEGIN
      READ_ASCII (itm_off + (slot_num * 0x14)) weapon
      PATCH_IF ("%item%" STRING_COMPARE_CASE "%weapon%" = 0) BEGIN // if long sword
        WRITE_SHORT (slot_off + 0x4c) index // sets weapon slot to selected weapon
        SET index = 4
      END
    END
  END

END

// this function moves an item in a creture file into a slot where it can't be pickocketed
// also used to move items out of helmet slot for non-legit crit protection
DEFINE_PATCH_FUNCTION cd_no_pickpocket

  // defines what we're going to check
  STR_VAR item = ""

BEGIN

  READ_LONG 0x320 slot_off ELSE 0
  READ_LONG 0x324 itm_off  ELSE 0
  READ_LONG 0x328 itm_num  ELSE 0
  SET added = 0
  FOR (index = 0 ; index < itm_num ; ++index) BEGIN
    READ_ASCII (itm_off + (0x14 * index)) file_item
    PATCH_IF ("%item%" STRING_COMPARE_CASE "%file_item%" = 0) BEGIN
      FOR (index2 = 0 ; index2 < 36 ; ++index2) BEGIN // search through item slots; first pass finds and/or removes
        READ_SHORT (slot_off + (0x02 * index2)) ref
        PATCH_IF (ref = index) BEGIN // if item in question
          PATCH_IF ((index2 = 1) OR (index2 = 3) OR ((index2 > 6) AND (index2 < 18))) BEGIN // if legit slot (1, 3, 7-17)
            SET added = 1
          END ELSE BEGIN
            WRITE_SHORT (slot_off + (0x02 * index2)) 0xffff // nulls reference
          END
        END
      END
      PATCH_IF added = 0 BEGIN // if not in a legit slot to begin with
        FOR (index2 = 1 ; index2 < 36 ; ++index2) BEGIN // search through item slots (skipping helmet at 0); first pass finds and/or removes
          PATCH_IF (index2 =  2) BEGIN SET index2 =  3 END // skip shield slot
          PATCH_IF (index2 =  4) BEGIN SET index2 =  7 END // skip rings & amulet
          PATCH_IF (index2 = 18) BEGIN SET index2 = 21 END // skip quick slots
          READ_SHORT (slot_off + (0x02 * index2)) ref
          PATCH_IF (ref = 0xffff) BEGIN // if empty, legit slot
            WRITE_SHORT (slot_off + (0x02 * index2)) index // adds reference
            SET index  = itm_num  // kill loops
            SET index2 = 36       // kill loops
          END
        END
      END
    END
  END

END

// DELETE_CRE_ITEM assumes creature file v1, not oIWD's v9

DEFINE_PATCH_FUNCTION ~DELETE_CRE_ITEM_V9~
  STR_VAR item_to_delete = ~blank~
BEGIN
  
  READ_LONG 0x320 slot_off ELSE 0
  READ_LONG 0x324 itm_off  ELSE 0
  READ_LONG 0x328 itm_num  ELSE 0
  SET delta = 0
  FOR (index = 0 ; index < itm_num ; ++index) BEGIN
    READ_ASCII (itm_off + (0x14 * index)) file_item
    PATCH_IF (("%file_item%" STRING_MATCHES_REGEXP "%item_to_delete%" = 0) OR
              (("%file_item%" STRING_COMPARE_CASE ~~ = 0) AND ("%item_to_delete%" STRING_COMPARE_CASE ~blank~ = 0))) BEGIN
      FOR (index2 = 0 ; index2 < 36 ; ++index2) BEGIN // search through item slots; first pass finds and/or removes
        READ_SHORT (slot_off + (0x02 * index2) - (delta * 0x14)) ref
        PATCH_IF (ref = index) BEGIN // if item in question
          WRITE_SHORT (slot_off + (0x02 * index2) - (delta * 0x14)) 0xffff // nulls reference
        END ELSE 
        PATCH_IF ((ref > index) AND (ref != 0xffff)) BEGIN // if after item in question
          WRITE_SHORT (slot_off + (0x02 * index2) - (delta * 0x14)) (THIS - 1) // move up one
        END   
      END
      DELETE_BYTES (itm_off + (0x14 * index)) 0x14 // delete item
      SET delta += 1
      SET index -= 1
    END // end item match
  END // end main item loop
  PATCH_IF delta BEGIN // if changes, fix offsets and item count
    WRITE_LONG 0x328 THIS - delta
    PATCH_FOR_EACH offset IN 0x308 0x310 0x318 0x320 0x32c BEGIN
      READ_LONG offset off
      PATCH_IF off > itm_off BEGIN
        WRITE_LONG offset (THIS - (delta * 0x14))
      END
    END
  END    
  
END

/////                                                  \\\\\
///// alter_header                                     \\\\\
/////                                                  \\\\\

// got tired of crappy ALTER_ITEM_HEADER and ALTER_SPELL_HEADER
DEFINE_PATCH_FUNCTION ALTER_HEADER

  // defines what we're going to check
  INT_VAR multi_match         = 999
          verbose             = 0
          silent              = 0
          header              = "-1"

  // variables for finding the effect to match
          match_type        = "-1"
          match_location    = "-1"
          match_target      = "-1"
          match_target_num  = "-1"
          match_range       = "-1"
          match_speed       = "-1"
          match_projectile  = "-1"
          // spell headers only
          match_level       = "-1"
          // item headers only
          match_identify       = "-1"
          match_alt_dicesize   = "-1"
          match_launcher       = "-1"
          match_alt_dicenumber = "-1"
          match_alt_damage     = "-1"
          match_to_hit         = "-1"
          match_dicesize       = "-1"
          match_primary        = "-1"
          match_dicenumber     = "-1"
          match_secondary      = "-1"
          match_damage         = "-1"
          match_damage_type    = "-1"
          match_charges        = "-1"
          match_drained        = "-1"
          match_overhand       = "-1"
          match_backhand       = "-1"
          match_thrust         = "-1"
          match_arrow          = "-1"
          match_bolt           = "-1"
          match_bullet         = "-1"
          // flags at 0x26 (still item only)
          match_flag_strength      = "-1" // add strength bonus, bit0
          match_flag_break         = "-1" // breakable, bit1
          match_flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          match_flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          match_flag_hostile       = "-1" // hostile, bit10
          match_flag_recharge      = "-1" // recharge after resting, bit11
          match_flag_bypass        = "-1" // bypass armor, bit16
          match_flag_keenedge      = "-1" // keen edge, bit17
          match_flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          match_flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // variables for the new effect
          type        = "-1"
          location    = "-1"
          target      = "-1"
          target_num  = "-1"
          range       = "-1"
          speed       = "-1"
          projectile  = "-1"
          // spell headers only
          level       = "-1"
          // item headers only
          identify       = "-1"
          alt_dicesize   = "-1"
          launcher       = "-1"
          alt_dicenumber = "-1"
          alt_damage     = "-1"
          to_hit         = "-1"
          dicesize       = "-1"
          primary        = "-1"
          dicenumber     = "-1"
          secondary      = "-1"
          damage         = "-1"
          damage_type    = "-1"
          charges        = "-1"
          drained        = "-1"
          overhand       = "-1"
          backhand       = "-1"
          thrust         = "-1"
          arrow          = "-1"
          bolt           = "-1"
          bullet         = "-1"
          // flags at 0x26
          flag_strength      = "-1" // add strength bonus, bit0
          flag_break         = "-1" // breakable, bit1
          flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          flag_hostile       = "-1" // hostile, bit10
          flag_recharge      = "-1" // recharge after resting, bit11
          flag_bypass        = "-1" // bypass armor, bit16
          flag_keenedge      = "-1" // keen edge, bit17
          flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // same for match and new STR_VAR
  STR_VAR match_icon      = "SAME"
          icon            = "SAME"
BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0
  SET proceed = 0
  SET alter = 0
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END ELSE
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "SPL" = 0) BEGIN
    SET abil_length = 0x28
  END
  PATCH_IF abil_length = 0 BEGIN
    PATCH_WARN ~WARNING: file type not recognized on %SOURCE_FILE% for ALTER_HEADER macro.~
  END ELSE BEGIN
    SET pro_off = abil_length = 0x38 ? 0x2a : 0x26
    READ_LONG   0x64 abil_off
    READ_SHORT  0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      PATCH_IF ((header < 0) OR (header = index)) BEGIN
        SET base = abil_off + (index * abil_length)
        READ_BYTE  (base + 0x00) o_type
        READ_BYTE  (base + 0x02) o_location
        READ_ASCII (base + 0x04) o_icon (8) NULL
        READ_BYTE  (base + 0x0c) o_target
        READ_BYTE  (base + 0x0d) o_target_num
        READ_SHORT (base + 0x0e) o_range
        READ_SHORT (base + pro_off) o_projectile
        PATCH_IF abil_length = 0x38 BEGIN
          // item headers only
          READ_BYTE  (base + 0x01) o_identify
          READ_BYTE  (base + 0x03) o_alt_dicesize
          READ_BYTE  (base + 0x10) o_launcher
          READ_BYTE  (base + 0x11) o_alt_dicenumber
          READ_BYTE  (base + 0x12) o_speed
          READ_BYTE  (base + 0x13) o_alt_damage
          READ_SHORT (base + 0x14) o_to_hit
          READ_BYTE  (base + 0x16) o_dicesize
          READ_BYTE  (base + 0x17) o_primary
          READ_BYTE  (base + 0x18) o_dicenumber
          READ_BYTE  (base + 0x19) o_secondary
          READ_SHORT (base + 0x1a) o_damage
          READ_SHORT (base + 0x1c) o_damage_type
          READ_SHORT (base + 0x22) o_charges
          READ_SHORT (base + 0x24) o_drained
          READ_LONG  (base + 0x26) o_flags
          READ_SHORT (base + 0x2c) o_overhand
          READ_SHORT (base + 0x2e) o_backhand
          READ_SHORT (base + 0x30) o_thrust
          READ_SHORT (base + 0x32) o_arrow
          READ_SHORT (base + 0x34) o_bolt
          READ_SHORT (base + 0x36) o_bullet
        END ELSE BEGIN
          READ_SHORT (base + 0x10) o_level
          READ_SHORT (base + 0x12) o_speed
        END
        // now check our header vs. the match variables
        PATCH_IF ((multi_match != 0) AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_location   = o_location)   OR (match_location < 0))   AND
                  ((match_target     = o_target)     OR (match_target < 0))     AND
                  ((match_target_num = o_target_num) OR (match_target_num < 0)) AND
                  ((match_range      = o_range)      OR (match_range < 0))      AND
                  ((match_speed      = o_speed)      OR (match_speed < 0))      AND
                  ((match_projectile = o_projectile) OR (match_projectile < 0)) AND
                  (("%match_icon%" STRING_COMPARE_CASE "%o_icon%" = 0) OR ("%match_icon%" STRING_COMPARE_CASE "SAME" = 0))) BEGIN
          PATCH_IF (abil_length = 0x38) BEGIN  // item-specific checks
            PATCH_IF (((match_identify       = o_identify)       OR (match_identify < 0))       AND
                      ((match_alt_dicesize   = o_alt_dicesize)   OR (match_alt_dicesize < 0))   AND
                      ((match_launcher       = o_launcher)       OR (match_launcher < 0))       AND
                      ((match_alt_dicenumber = o_alt_dicenumber) OR (match_alt_dicenumber < 0)) AND
                      ((match_alt_damage     = o_alt_damage)     OR (match_alt_damage < 0))     AND
                      ((match_to_hit         = o_to_hit)         OR (match_to_hit < 0))         AND
                      ((match_dicesize       = o_dicesize)       OR (match_dicesize < 0))       AND
                      ((match_primary        = o_primary)        OR (match_primary < 0))        AND
                      ((match_dicenumber     = o_dicenumber)     OR (match_dicenumber < 0))     AND
                      ((match_secondary      = o_secondary)      OR (match_secondary < 0))      AND
                      ((match_damage         = o_damage)         OR (match_damage < 0))         AND
                      ((match_damage_type    = o_damage_type)    OR (match_damage_type < 0))    AND
                      ((match_charges        = o_charges)        OR (match_charges < 0))        AND
                      ((match_drained        = o_drained)        OR (match_drained < 0))        AND
                      ((match_overhand       = o_overhand)       OR (match_overhand < 0))       AND
                      ((match_backhand       = o_backhand)       OR (match_backhand < 0))       AND
                      ((match_thrust         = o_thrust)         OR (match_thrust < 0))         AND
                      ((match_arrow          = o_arrow)          OR (match_arrow < 0))          AND
                      ((match_bolt           = o_bolt)           OR (match_bolt < 0))           AND
                      ((match_bullet         = o_bullet)         OR (match_bullet < 0))         AND
                      ((match_flag_strength < 0) OR
                       (match_flag_strength = (flags & BIT0)) OR // not set
                       (match_flag_strength > 0 AND (flags & BIT0) = BIT0)) AND
                      ((match_flag_break < 0) OR
                       (match_flag_break = (flags & BIT1)) OR // not set
                       (match_flag_break > 0 AND (flags & BIT1) = BIT1)) AND
                      ((match_flag_str_damage < 0) OR
                       (match_flag_str_damage = (flags & BIT2)) OR // not set
                       (match_flag_str_damage > 0 AND (flags & BIT2) = BIT2)) AND
                      ((match_flag_str_to_hit < 0) OR
                       (match_flag_str_to_hit = (flags & BIT3)) OR // not set
                       (match_flag_str_to_hit > 0 AND (flags & BIT3) = BIT3)) AND
                      ((match_flag_hostile < 0) OR
                       (match_flag_hostile = (flags & BIT10)) OR // not set
                       (match_flag_hostile > 0 AND (flags & BIT10) = BIT10)) AND
                      ((match_flag_recharge < 0) OR
                       (match_flag_recharge = (flags & BIT11)) OR // not set
                       (match_flag_recharge > 0 AND (flags & BIT11) = BIT11)) AND
                      ((match_flag_bypass < 0) OR
                       (match_flag_bypass = (flags & BIT16)) OR // not set
                       (match_flag_bypass > 0 AND (flags & BIT16) = BIT16)) AND
                      ((match_flag_keenedge < 0) OR
                       (match_flag_keenedge = (flags & BIT17)) OR // not set
                       (match_flag_keenedge > 0 AND (flags & BIT17) = BIT17)) AND
                      ((match_flag_backstab < 0) OR
                       (match_flag_backstab = (flags & BIT25)) OR // not set
                       (match_flag_backstab > 0 AND (flags & BIT25) = BIT25)) AND
                      ((match_flag_noinvisible < 0) OR
                       (match_flag_noinvisible = (flags & BIT26)) OR // not set
                       (match_flag_noinvisible > 0 AND (flags & BIT26) = BIT26))) BEGIN
              SET proceed = 1
            END
          END ELSE BEGIN // spell-specific checks
            PATCH_IF ((match_level = o_level) OR (match_level < 0)) BEGIN
              SET proceed = 1
            END
          END
          PATCH_IF proceed BEGIN
            SET alter += 1
            SET multi_match -= 1
            PATCH_IF (type >= 0)       BEGIN WRITE_BYTE  (base + 0x00) type END
            PATCH_IF (location >= 0)   BEGIN WRITE_BYTE  (base + 0x02) location END
            PATCH_IF (target >= 0)     BEGIN WRITE_BYTE  (base + 0x0c) target END
            PATCH_IF (target_num >= 0) BEGIN WRITE_BYTE  (base + 0x0d) target_num END
            PATCH_IF (range >= 0)      BEGIN WRITE_SHORT (base + 0x0e) range END
            PATCH_IF (projectile >= 0) BEGIN WRITE_SHORT (base + pro_off) projectile END
            PATCH_IF ("%icon%" STRING_COMPARE_CASE "SAME") BEGIN WRITE_ASCIIE (base + 0x04) ~%icon%~ #8 END
            PATCH_IF abil_length = 0x38 BEGIN // item headers
              PATCH_IF (identify >= 0)       BEGIN WRITE_BYTE  (base + 0x01) identify       END
              PATCH_IF (alt_dicesize >= 0)   BEGIN WRITE_BYTE  (base + 0x03) alt_dicesize   END
              PATCH_IF (launcher >= 0)       BEGIN WRITE_BYTE  (base + 0x10) launcher       END
              PATCH_IF (alt_dicenumber >= 0) BEGIN WRITE_BYTE  (base + 0x11) alt_dicenumber END
              PATCH_IF (speed >= 0)          BEGIN WRITE_BYTE  (base + 0x12) speed          END
              PATCH_IF (alt_damage >= 0)     BEGIN WRITE_BYTE  (base + 0x13) alt_damage     END
              PATCH_IF (to_hit >= 0)         BEGIN WRITE_SHORT (base + 0x14) to_hit         END
              PATCH_IF (dicesize >= 0)       BEGIN WRITE_BYTE  (base + 0x16) dicesize       END
              PATCH_IF (primary >= 0)        BEGIN WRITE_BYTE  (base + 0x17) primary        END
              PATCH_IF (dicenumber >= 0)     BEGIN WRITE_BYTE  (base + 0x18) dicenumber     END
              PATCH_IF (secondary >= 0)      BEGIN WRITE_BYTE  (base + 0x19) secondary      END
              PATCH_IF (damage >= 0)         BEGIN WRITE_SHORT (base + 0x1a) damage         END
              PATCH_IF (damage_type >= 0)    BEGIN WRITE_SHORT (base + 0x1c) damage_type    END
              PATCH_IF (charges >= 0)        BEGIN WRITE_SHORT (base + 0x22) charges        END
              PATCH_IF (drained >= 0)        BEGIN WRITE_SHORT (base + 0x24) drained        END
              PATCH_IF (overhand >= 0)       BEGIN WRITE_SHORT (base + 0x2c) overhand       END
              PATCH_IF (backhand >= 0)       BEGIN WRITE_SHORT (base + 0x2e) backhand       END
              PATCH_IF (thrust >= 0)         BEGIN WRITE_SHORT (base + 0x30) thrust         END
              PATCH_IF (arrow >= 0)          BEGIN WRITE_SHORT (base + 0x32) arrow          END
              PATCH_IF (bolt >= 0)           BEGIN WRITE_SHORT (base + 0x34) bolt           END
              PATCH_IF (bullet >= 0)         BEGIN WRITE_SHORT (base + 0x36) bullet         END
  
              PATCH_IF (flag_strength = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT0)  END
              PATCH_IF (flag_strength > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT0)  END
              PATCH_IF (flag_break = 0)       BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT1)  END
              PATCH_IF (flag_break > 0)       BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT1)  END
              PATCH_IF (flag_str_damage = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT2)  END
              PATCH_IF (flag_str_damage > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT2)  END
              PATCH_IF (flag_str_to_hit = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT3)  END
              PATCH_IF (flag_str_to_hit > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT3)  END
              PATCH_IF (flag_hostile = 0)     BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT10) END
              PATCH_IF (flag_hostile > 0)     BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT10) END
              PATCH_IF (flag_recharge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT11) END
              PATCH_IF (flag_recharge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT11) END
              PATCH_IF (flag_bypass = 0)      BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT16) END
              PATCH_IF (flag_bypass > 0)      BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT16) END
              PATCH_IF (flag_keenedge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT17) END
              PATCH_IF (flag_keenedge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT17) END
              PATCH_IF (flag_backstab = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT25) END
              PATCH_IF (flag_backstab > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT25) END
              PATCH_IF (flag_noinvisible = 0) BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT26) END
              PATCH_IF (flag_noinvisible > 0) BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT26) END
            END ELSE BEGIN // spell headers
              PATCH_IF (level >= 0) BEGIN WRITE_SHORT (base + 0x10) level END
              PATCH_IF (speed >= 0) BEGIN WRITE_SHORT (base + 0x12) speed END
            END
          END // proceed check
        END // mutual fields check
      END // for loop
    END // header check
  END // abil_length check

  PATCH_IF (alter = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no effects altered on %SOURCE_FILE% via ALTER_HEADER"
  END

  PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %alter% effect(s) altered"
  END

END